

//Command to Create A file:
touch fileName.extension

// To initialize folder as a git repository, also it will create a ".git" folder in your directory
git init

//if you didn't add your mail-id and username to git the do that thing first

git config --global user.name 'your-name'

//mail-id

git config --global user.email 'your-email'

// default editor for git instead of using vim
git config --global core.editor "code --wait"

// to edit all the global setting using the deault editor
git config --global -e

//modify end of lines
git config --global core.autocrlf input // for mac and linux
git config --global core.autocrlf true // for windows


// To add files to your git repository

git add filename(with extension)

//Other way of adding files to git repo is 

git add *.extension //which will add all files with the same extension

// To add everything (including files, folders etc) in your current folder to your git repository use the command..

git add .


// To check the staging area of your files 

git status // THis will tell us what files are added to the staging area and what files were not added to it( with the message untrackable files shown on the screen)

//the get shorter description when using the git status command
git status -s

//to compare between working directory and staging area code
git diff
// to compare the stages between staging area and commited code
git diff --staged

//to use git diff command in GUI like vscode follow the steps
git config --global diff.tool vscode
git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"
git config --global -e //it'll open vscode and you can check it once

//now we can use the git diff command using vscode
git difftool  // staging area vs working directory
git difftool --staged //staging area vs commited code

//To check what files are present in the staging area

git ls-files

//To remove a file from the staging area

git rm --cached file name


// To commit the files which are in the staging area

git commit -m 'comments'


//To check history of our commits in our git repository
git log
//To get an abstract view 
git log --oneline
//To get the above information provided by this command in reverse
git log --oneline --reverse

//Viewing a commit
git show id_in hexa decimal //to view the changes done in that content file

git show HEAD~(a number) //To move to our desired location in the file

git show HEAD~(a number):file name //to view the content of the file when it was staged

git ls-tree HEAD~(a number) //to view the files during that commit



//.gitignore is a special file to which if you add any name of the files they will be ignored in both staging and commit

touch .gitignore


//To create a branch in which you do the same work without loosingthe main data

git branch name_of_the_branch(without any quotes)

//Now to switch to the created branch 

git checkout name_of_the_branch(the one you created.)

//To merge a branch with another one

git merge name_of_the_branch(the branch which you wanna merge with)

//To list the remote repository in your git repository
git remote

//To add a remote repository to the git
git remote add origin link_of_your_repository

//To push your local repository to a remote repository(github)
git push -u origin master(name_of_the_branch you want to push)

//To clone any remote repo in github to your local storage

git clone link_of_the_repo

//To clone the latest changes of your repo use

git pull

 

